% \iffalse meta-comment
%
% Copyright (C) 2018 by Max Schwarz <max.schwarz@online.de>
% ---------------------------------------------------------------------------
% This work may be distributed and/or modified under the
% conditions of the BSD 3-clause license. See LICENSE for details.
%
% The Current Maintainer of this work is Max Schwarz.
%
% This work consists of the files graphicscache.dtx and graphicscache.ins
% and the derived filebase graphicscache.sty.
%
% \fi
%
% \iffalse
%<*driver>
\ProvidesFile{graphicscache.dtx}
%</driver>
%<package>\NeedsTeXFormat{LaTeX2e}[1999/12/01]
%<package>\ProvidesPackage{graphicscache}
%<*package>
    [2018/10/03 v0.1 Cache includegraphics calls]
%</package>
%
%<*driver>
\documentclass[a4paper,11pt]{ydoc}
\usepackage{ydoc-expl}
\usepackage{graphicscache}
\usepackage[capitalize]{cleveref}
\EnableCrossrefs
\CodelineIndex
\RecordChanges
\begin{document}
  \DocInput{graphicscache.dtx}
  \PrintChanges
  \PrintIndex
\end{document}
%</driver>
% \fi
%
% \CheckSum{136}
%
% \CharacterTable
%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%   Digits        \0\1\2\3\4\5\6\7\8\9
%   Exclamation   \!     Double quote  \"     Hash (number) \#
%   Dollar        \$     Percent       \%     Ampersand     \&
%   Acute accent  \'     Left paren    \(     Right paren   \)
%   Asterisk      \*     Plus          \+     Comma         \,
%   Minus         \-     Point         \.     Solidus       \/
%   Colon         \:     Semicolon     \;     Less than     \<
%   Equals        \=     Greater than  \>     Question mark \?
%   Commercial at \@     Left bracket  \[     Backslash     \\
%   Right bracket \]     Circumflex    \^     Underscore    \_
%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%   Right brace   \}     Tilde         \~}
%
%
% \changes{v0.1}{2018/10/03}{Initial version}
%
% \DoNotIndex{\newcommand,\newenvironment}
%
% \providecommand*{\url}{\texttt}
% \GetFileInfo{graphicscache.dtx}
% \title{The \textsf{graphicscache} package}
% \author{Max Schwarz \\ \url{max.schwarz@online.de}}
% \date{\fileversion~from \filedate}
%
% \maketitle
%
% \section{Introduction}
%
% The \texttt{graphicx} package offers the versatile |\includegraphics| command,
% which offers image transformations like scaling, cropping, rotation, etc.
% However, these transformations have to be performed on every compilation of
% the document. Users can avoid this with the |draft| option at the cost of
% not seeing the images.
%
% Furthermore, images are always included as-is with full resolution, even if
% they are shown at a very small actual size. This increases compilation time
% again and leads to large output files. A typical solution is to resize the
% input images to a lower resolution---but here, the user has to manually
% calculate or guess the required resolution. What we really want is to specify
% a \textit{document DPI}, which automatically leads to the correct image
% resolution. This is possible using post-processing tools like ghostscript,
% but these do not help with compilation times and are typically not applicable
% for preprint servers or journals which require LaTeX sources.
%
% |graphicscache| aims to solve these problems by decoupling the rendering
% of images from the actual inclusion. Images are rendered to the correct size
% using a separate |pdflatex| call, post-processed with ghostscript, and then
% included as PDF. As a bonus, the resulting PDF is cached, resulting in very
% fast recompilation times.
%
% \section{Usage}
%
% |graphicscache| requires the usage of the |\write18| call (also called shell
% escape). For |pdflatex|, you have to specify the |-shell-escape| argument
% during compilation. After enabling shell-escape, simply call
%
% \begin{example}
%   |\usepackage{graphicscache}|
% \end{example}
%
% to enable caching.
%
% |graphicscache| overrides the |\includegraphics| command so that you can use
% it as usual. Internally, it calculates a hash from the |includegraphics|
% arguments and the package options to generate a cache key.
% If you change the input image file or the options, the file will be
% automatically rendered again.
%
% \textbf{Note:} The first compilation process might take a while, since the
% cached PDFs are generated one-by-one.
%
% \subsection{Generated files}
%
% |graphicscache| will create a folder called |graphicscache| in the compilation
% directory. Additionally, latex output files under the jobname
% |graphicscacheout| will be created. All of these files and folders are
% temporary and can be deleted safely (at the cost of re-creating the cache).
%
% \subsection{Package options}
%
% \DescribeKey{compress}'=false|flat|jpeg'
% Specifies the image compression algorithm. If |false|, the ghostscript call
% is skipped, thus embedding the image at its original resolution and format.
% If |flat|, the lossless |FlatEncode| algorithm is chosen. Finally, |jpeg|
% indicates that JPEG encoding using |DCTEncode| is to be performed.
%
% \textbf{Note:} In the |flat| case, the images are still downsampled to match
% the DPI specified using the |dpi| key.
%
% \DescribeKey{dpi}'='<number>
% Controls the image resolution in dots per inch. The default value is 300.
% This option only takes effect if |compress| is not |false|.
%
% \DescribeKey{qfactor}'='<number>
% This controls the quality parameter of the JPEG encoder (see |compress|).
% Smaller values give higher quality. The default value is 0.15, which
% corresponds to the ``Maximum'' setting mentioned by Adobe.
%
% \DescribeKey{render}'=true|false'
% Controls whether rendering is allowed. The default is |true|. If |false|,
% |graphicscache| is not allowed to create new cache files. Instead, it will
% attempt to use the appropriate cache file. If it does not exist,
% |graphicscache| will fall back to |graphicx| in-place rendering.
% This can be used to perform a final release (see \cref{sec:release}).
%
% \subsection{Macros}
%
% \DescribeMacro{\includegraphics}[args]{path}
% This behaves exactly like the original |graphicx| |\includegraphics|. |args|
% are forwarded to |graphicx|.
%
% \StopEventually{}
%
% \section{Releasing your manuscript}
% \label{sec:release}
%
% In case you want to upload your manuscript to a journal or preprint server,
% you can use |graphicscache| to make your work easier:
% \begin{enumerate}
%  \item Use |latexpand| to strip comments and flatten your tex sources into
%        one file (optional).
%  \item Compile the file as usual to generate the cache files.
%  \item Compile the file again using the |render=false| option and the
%        |-recorder| command line option.
%  \item The generated |.fls| file will contain all cache files that are needed
%        to compile your manuscript. Package them and your |.tex| file.
% \end{enumerate}
%
% \section{Implementation}
%
% \iffalse
%<*package>
% \fi
%
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}[1994/06/01]
\ProvidesPackage{graphicscache}[2018/10/02 Graphics Cache]
\RequirePackage{graphicx}
\RequirePackage[tightpage]{preview}
\RequirePackage{xstring}
\RequirePackage{filemod}
\RequirePackage{letltxmacro}
\RequirePackage{preview}
\RequirePackage{pgfopts}
\newif\ifgraphicscache@render
\newif\ifgraphicscache@compress
\newif\ifgraphicscache@standalone
\graphicscache@compressfalse
\pgfkeys{
  /graphicscache/.cd,
  render/.is if=graphicscache@render,
  render=true,
  standalone/.is if=graphicscache@standalone,
  standalone=false,
%    \end{macrocode}
%    \begin{macrocode}
  compress/.is choice,
  compress/false/.code={\graphicscache@compressfalse},
  compress/jpeg/.code={\graphicscache@compresstrue \def\graphicscache@compress@mode{DCTEncode}},
  compress/flat/.code={\graphicscache@compresstrue \def\graphicscache@compress@mode{FlatEncode}},
  compress=jpeg,
%    \end{macrocode}
%    \begin{macrocode}
  dpi/.store in=\graphicscache@dpi,
  dpi=300,
%    \end{macrocode}
%    \begin{macrocode}
  qfactor/.store in=\graphicscache@qfactor,
  qfactor={0.15}
}
\ProcessPgfOptions{/graphicscache}\relax
%    \end{macrocode}
%
% \begin{macro}{\graphicscache@dorender}
%    \begin{macrocode}
\newcommand{\graphicscache@dorender}{%
  \message{Rendering \graphicscache@outputhash: \graphicscache@fname \space (master file)}%
%   \end{macrocode}
% First, render the graphics either using standalone or preview.
%   \begin{macrocode}
  \ifgraphicscache@standalone
    \message{standalone method}
    \StrSubstitute{\graphicscache@fname}{_}{\string\_}[\graphicscache@fname@tex]
    \immediate\write18{pdflatex
      -jobname graphicscacheout
      -interaction nonstopmode
      '\string\documentclass{standalone}\string\begin{document}\string\includegraphics[\graphicscache@args]{\graphicscache@fname@tex}\string\end{document}'
    }%
  \else
    \message{preview method}
    \immediate\write18{pdflatex
      -jobname graphicscacheout
      -interaction nonstopmode
      '\string\PassOptionsToPackage{active}{preview}\string\makeatletter\string\def\string\graphicscache@figure{\graphicscache@outputhash}\string\makeatother\string\input{\jobname}'
      > /dev/null
    }%
  \fi
  \immediate\write18{mkdir -p graphicscache}%
%    \end{macrocode}
% Now it gets complicated!
%    \begin{macrocode}
  \ifgraphicscache@compress
    \message{With compression}
    \immediate\write18{gs
      -sOutputFile=\graphicscache@output\space
      -sDEVICE=pdfwrite
      -dCompatibilityLevel=1.4
      -dPDFSETTINGS=/prepress
      -dNOPAUSE -dQUIET -dBATCH
      -c '.setpdfwrite <<
        /AutoFilterColorImages false
        /EncodeColorImages true
        /ColorImageFilter /\graphicscache@compress@mode\space
        /ColorImageDict << /ColorTransform 1 /QFactor \graphicscache@qfactor\space /Blend 1 /HSamples [1 1 1 1] /VSamples [1 1 1 1] >>
        /ColorImageResolution \graphicscache@dpi\space
        /AutoFilterGrayImages false
        /EncodeGrayImages true
        /GrayImageFilter /\graphicscache@compress@mode\space
        /GrayImageDict << /ColorTransform 1 /QFactor \graphicscache@qfactor\space /Blend 1 /HSamples [1 1 1 1] /VSamples [1 1 1 1] >>
        /GrayImageResolution \graphicscache@dpi\space
      >> setdistillerparams'
      -f graphicscacheout.pdf%
    }%
  \else
    \message{Direct}
    \immediate\write18{
      cp graphicscacheout.pdf \graphicscache@output
    }%
  \fi
}
%    \end{macrocode}
% \end{macro}
%
% save original |\includegraphics|
%    \begin{macrocode}
\LetLtxMacro\graphicscache@includegraphics\includegraphics
%    \end{macrocode}
%
% \begin{macro}{\includegraphics}
%    \begin{macrocode}
\renewcommand{\includegraphics}[2][]{%
  \begingroup
  \expandarg
%    \end{macrocode}
% Hash everything!
%    \begin{macrocode}
  \edef\graphicscache@options{\@nameuse{opt@graphicscache.sty}}%
  \edef\graphicscache@args{\detokenize{#1}}%
  \edef\graphicscache@fname{\detokenize{#2}}%
  \edef\graphicscache@outputhash{\pdfmdfivesum{\graphicscache@options\graphicscache@args\graphicscache@fname}}%
  \edef\graphicscache@output{./graphicscache/\graphicscache@outputhash.pdf}%
  \ifPreview
%    \end{macrocode}
% Render it!
%    \begin{macrocode}
    \ifnum\pdf@strcmp{\graphicscache@outputhash}{\graphicscache@figure}=0 %
      \message{Rendering \graphicscache@outputhash \space (preview file)}%
      \setlength{\PreviewBorder}{0pt}%
      \begin{preview}%
        \graphicscache@includegraphics[#1]{#2}%
      \end{preview}%
    \fi
  \else
    \ifgraphicscache@render
%    \end{macrocode}
% Check if output file exists and is newer than input
%    \begin{macrocode}
      \filemodcmp{#2}{\graphicscache@output}{% input is newer
        \graphicscache@dorender%
      }{% Output is newer
        \message{Already have \graphicscache@outputhash: \graphicscache@fname}%
      }%
%    \end{macrocode}
% If it still does not exist, we are likely in a strange environment
% (e.g. tabu). In that case, fall back to original includegraphics.
%    \begin{macrocode}
      \filemodcmp{#2}{\graphicscache@output}{% input is newer/output does not exist
        \graphicscache@includegraphics[#1]{#2}%
      }{% otherwise, use the generated file!
        \graphicscache@includegraphics{\graphicscache@output}%
      }%
    \else
%    \end{macrocode}
% Here, we just look if the output file exists. If not, fall back to
% original includegraphics.
%    \begin{macrocode}
      \IfFileExists{\graphicscache@output}{%
        \graphicscache@includegraphics{\graphicscache@output}%
      }{%
        \graphicscache@includegraphics[#1]{#2}%
      }%
    \fi
  \fi
  \endgroup
}
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
\endinput
%    \end{macrocode}

%
% \iffalse
%</package>
% \fi
%
% \Finale
\endinput
